'kiosk', 'logbook', 'server', 'c4c', 'patient_uploader', 'transmitter', 'clinic_uploader',
'platform_count')
data[,categorical_colnames] <- lapply(data[,categorical_colnames], factor)
return(data)
}
continuousVariableHandler <- function(data) {
numeric_columns <- data[,sapply(data, is.numeric)]
numeric_columns[is.na(numeric_columns)] <- 0
data[,sapply(data, is.numeric)] <- numeric_columns
return(data)
}
naHandler <- function(data) {
data[is.na(data)] <- 0
return(data)
}
#Function to compute accuracy of a classification model... you're welcome...
tableAccuracy <- function(test, pred) {
t = table(test, pred)
a = sum(diag(t))/length(test)
return(a)
}
removeColumns <- function(data) {
data <- data[,-grep('first_sync_timestamp', colnames(data))]
data <- data[,-grep('test_user_email', colnames(data))]
data <- data[,-grep('user_type', colnames(data))]
return(data)
}
library(dplyr)
library(ggplot2)
library(GGally)
library(caTools)
library(ROCR)
library(MASS)
library(caret)
library(dplyr)
library(rpart) # CART
library(rpart.plot) # CART plotting
library(caret) # cross validation
library(rpart)
library(randomForest)
library(gbm)
library(car)
library(stats)
library(glookoGEO)
#Churn Analysis - churn_data User, 4 week rolling
cp_11_16 <- glookoGetQuery("select * from churn_prediction_v2_2016_11_16")
cp_11_23 <- glookoGetQuery("select * from churn_prediction_v2_2016_11_23")
cp_11_30 <- glookoGetQuery("select * from churn_prediction_v2_2016_11_30")
cp_12_07 <- glookoGetQuery("select * from churn_prediction_v2_2016_12_07")
cp_12_14 <- glookoGetQuery("select * from churn_prediction_v2_2016_12_14")
cp_12_21 <- glookoGetQuery("select * from churn_prediction_v2_2016_12_21")
cp_12_28 <- glookoGetQuery("select * from churn_prediction_v2_2016_12_28")
cp_1_04 <- glookoGetQuery("select * from churn_prediction_v2_2017_01_04")
cp_1_11 <- glookoGetQuery("select * from churn_prediction_v2_2017_01_11")
cp_1_18 <- glookoGetQuery("select * from churn_prediction_v2_2017_01_18")
cp_1_25 <- glookoGetQuery("select * from churn_prediction_v2_2017_01_25")
cp_2_01 <- glookoGetQuery("select * from churn_prediction_v2_2017_02_01")
cp_2_08 <- glookoGetQuery("select * from churn_prediction_v2_2017_02_08")
cp_2_15 <- glookoGetQuery("select * from churn_prediction_v2_2017_02_15")
cp_2_22 <- glookoGetQuery("select * from churn_prediction_v2_2017_02_22")
cp_3_01 <- glookoGetQuery("select * from churn_prediction_v2_2017_03_01")
cp_3_08 <- glookoGetQuery("select * from churn_prediction_v2_2017_03_08")
cp_3_15 <- glookoGetQuery("select * from churn_prediction_v2_2017_03_15")
cp_3_22 <- glookoGetQuery("select * from churn_prediction_v2_2017_03_22")
cp_3_29 <- glookoGetQuery("select * from churn_prediction_v2_2017_03_29")
cp_4_05 <- glookoGetQuery("select * from churn_prediction_v2_2017_04_05")
cp_4_12 <- glookoGetQuery("select * from churn_prediction_v2_2017_04_12")
cp_4_19 <- glookoGetQuery("select * from churn_prediction_v2_2017_04_19")
cp_4_26 <- glookoGetQuery("select * from churn_prediction_v2_2017_04_26")
cp_5_03 <- glookoGetQuery("select * from churn_prediction_v2_2017_05_03")
cp_5_10 <- glookoGetQuery("select * from churn_prediction_v2_2017_05_10")
cp_5_17 <- glookoGetQuery("select * from churn_prediction_v2_2017_05_17")
cp_5_24 <- glookoGetQuery("select * from churn_prediction_v2_2017_05_24")
cp_5_31 <- glookoGetQuery("select * from churn_prediction_v2_2017_05_31")
cp_6_07 <- glookoGetQuery("select * from churn_prediction_v2_2017_06_07")
cp_6_14 <- glookoGetQuery("select * from churn_prediction_v2_2017_06_14")
cp_6_21 <- glookoGetQuery("select * from churn_prediction_v2_2017_06_21")
cp_6_28 <- glookoGetQuery("select * from churn_prediction_v2_2017_06_28")
cp_7_05 <- glookoGetQuery("select * from churn_prediction_v2_2017_07_05")
cp_7_12 <- glookoGetQuery("select * from churn_prediction_v2_2017_07_12")
cp_7_19 <- glookoGetQuery("select * from churn_prediction_v2_2017_07_19")
cp_7_26 <- glookoGetQuery("select * from churn_prediction_v2_2017_07_26")
cp_8_02 <- glookoGetQuery("select * from churn_prediction_v2_2017_08_02")
cp_list <- list(cp_11_16, cp_11_23,
cp_11_30, cp_12_07, cp_12_14, cp_12_21, cp_12_28,
cp_1_04, cp_1_11, cp_1_18, cp_1_25,
cp_2_01, cp_2_08, cp_2_15, cp_2_22, cp_3_01, cp_3_08, cp_3_15,
cp_3_22, cp_3_29, cp_4_05, cp_4_12, cp_4_19, cp_4_26, cp_5_03,
cp_5_10, cp_5_17, cp_5_24, cp_5_31, cp_6_07, cp_6_14,
cp_6_21, cp_6_28, cp_7_05, cp_7_12, cp_7_19, cp_7_26, cp_8_02)
###Get other necessary data
sync_data <- glookoGetQuery(constructQuery('sync_data'))
user_query <- "select users_final.glooko_code, users_final.proconnect,
users_final.user_type, users_final.diabetes_type, users_final.gender,
users_final.cgm_model, users_final.cgm_brand, users_final.cgm_serial_number,
users_final.pump_model, users_final.pump_brand, users_final.pump_serial_number,
users_final.meter_model, users_final.meter_brand, users_final.meter_serial_number from users_final"
user_data <- glookoGetQuery(user_query)
#Start Data Transformations
app_syncs <- appSyncs(sync_data)
cp_list_au <- lapply(cp_list, function(i) {
merge(user_data, i, by='glooko_code', all.y=T)
})
cp_list_au <- lapply(cp_list_au, function(i) {
subset(i, glooko_code %in% app_syncs$glooko_code)
})
cp <- do.call(rbind, cp_list_au)
churn_data <- diabetesHandler(cp)
churn_data <- genderHandler(churn_data)
churn_data <- osHandler(churn_data)
churn_data <- applicationNameHandler(churn_data)
churn_data <- meterHandler(churn_data)
churn_data <- pumpHandler(churn_data)
churn_data <- cgmHandler(churn_data)
churn_data <- backgroundSyncHandler(churn_data)
churn_data <- diabetesDeviceCountHandler(churn_data)
churn_data <- proconnectHandler(churn_data)
churn_data <- categoricalVariableHandler(churn_data)
churn_data <- continuousVariableHandler(churn_data)
churn_data <- removeColumns(churn_data)
churn_data <- churn_data[complete.cases(churn_data),]
#All cases complete!
#PreProcessing Done - Let the training begin!!!
# set seed for reproducibility
set.seed(144)
#Round 1 - do all users versus segmenting by any clustering characteristics
train_ids = sample(nrow(churn_data), 0.70*nrow(churn_data))
train_set <- churn_data[train_ids,]
test_set <- churn_data[-train_ids,]
#Baseline accuracy - predict that every one churns
table(train_set$churn)
3004/nrow(train_set) #.497 accuracy for train_set
table(test_set$churn)
1265/nrow(test_set) #.485 accuracy for test_set
#Run training set - all
##Logistic Regression
mod <- glm(churn ~ ., data=train_set, family="binomial")
#Certain variables can't run because not enough varation
train_set <- train_set[,-grep('transmitter', colnames(train_set))]
train_set <- train_set[,-grep('clinic_uploader', colnames(train_set))]
train_set <- train_set[,-grep('m2f_meter', colnames(train_set))]
#Try running above glm mod again once the variables have been removed
vif(mod) #there are aliased coefficients
alias(mod) #shows pop_tracker_per_wbs & no_diabetes causing problems due to perfect correlation
#Drop problematic variables
#train_set <- train_set[,-grep('no_diabetes', colnames(train_set))]
summary(mod)
#Try baseline model for train set
predTrain_mod <- predict(mod, data=train_set, type="response")
tableAccuracy(train_set$churn, predTrain_mod > 0.5) #(.749 accuracy)
table(train_set$churn, predTrain_mod > 0.5)
2383/(625+2383) #TPR = .79
873/(873+2169) #FPR = .28
#Try step model
mod_stBoth <- step(mod, direction='both')
predTrain_mod_stBoth <- predict(mod_stBoth, data=train_set, type="response")
tableAccuracy(train_set$churn, predTrain_mod_stBoth > 0.5) #(.742 accuracy)
table(train_set$churn, predTrain_mod_stBoth > 0.5)
2371/(2371+637) #TPR = .75
223/(223+1117) #FPR = .16
users <- rbind(read.csv("~/Desktop/cmh/users_0000.csv", header = F),
read.csv("~/Desktop/cmh/users_0001.csv", header = F),
read.csv("~/Desktop/cmh/users_0002.csv", header = F),
read.csv("~/Desktop/cmh/users_0003.csv", header = F),
read.csv("~/Desktop/cmh/users_0004.csv", header = F),
read.csv("~/Desktop/cmh/users_0005.csv", header = F),
read.csv("~/Desktop/cmh/users_0006.csv", header = F),
read.csv("~/Desktop/cmh/users_0007.csv", header = F),
read.csv("~/Desktop/cmh/users_0008.csv", header = F),
read.csv("~/Desktop/cmh/users_0009.csv", header = F))
users <- users[,'V9']
users <- rbind(read.csv("~/Desktop/cmh/users_0000.csv", header = F),
read.csv("~/Desktop/cmh/users_0001.csv", header = F),
read.csv("~/Desktop/cmh/users_0002.csv", header = F),
read.csv("~/Desktop/cmh/users_0003.csv", header = F),
read.csv("~/Desktop/cmh/users_0004.csv", header = F),
read.csv("~/Desktop/cmh/users_0005.csv", header = F),
read.csv("~/Desktop/cmh/users_0006.csv", header = F),
read.csv("~/Desktop/cmh/users_0007.csv", header = F),
read.csv("~/Desktop/cmh/users_0008.csv", header = F),
read.csv("~/Desktop/cmh/users_0009.csv", header = F))
users <- users[,'V8',V9']
mrn <- read.csv("~/Downloads/users_mrn_11_27.csv")
colnames(mrn) <- c('glooko_code', 'mrn')
merge(users, mrn$glooko_code, all.x=True)
users <- users[,'V8','V9']
users <- rbind(read.csv("~/Desktop/cmh/users_0000.csv", header = F),
read.csv("~/Desktop/cmh/users_0001.csv", header = F),
read.csv("~/Desktop/cmh/users_0002.csv", header = F),
read.csv("~/Desktop/cmh/users_0003.csv", header = F),
read.csv("~/Desktop/cmh/users_0004.csv", header = F),
read.csv("~/Desktop/cmh/users_0005.csv", header = F),
read.csv("~/Desktop/cmh/users_0006.csv", header = F),
read.csv("~/Desktop/cmh/users_0007.csv", header = F),
read.csv("~/Desktop/cmh/users_0008.csv", header = F),
read.csv("~/Desktop/cmh/users_0009.csv", header = F))
head(users)
users <- users[,'V8','V9']
users <- users[,c('V8','V9')]
head(users)
colnames(users) <- c('weight_units', 'glooko_code')
mrn <- read.csv("~/Downloads/users_mrn_11_27.csv")
colnames(mrn) <- c('glooko_code', 'mrn')
?merge
final <- merge(users, mrn, by='glooko_code', all.x=TRUE)
head(final)
nrow(final)
final
unqiue(mrn$mrn)
unique(mrn$mrn)
users <- rbind(read.csv("~/Desktop/cmh/users_0000.csv", header = F),
read.csv("~/Desktop/cmh/users_0001.csv", header = F),
read.csv("~/Desktop/cmh/users_0002.csv", header = F),
read.csv("~/Desktop/cmh/users_0003.csv", header = F),
read.csv("~/Desktop/cmh/users_0004.csv", header = F),
read.csv("~/Desktop/cmh/users_0005.csv", header = F),
read.csv("~/Desktop/cmh/users_0006.csv", header = F),
read.csv("~/Desktop/cmh/users_0007.csv", header = F),
read.csv("~/Desktop/cmh/users_0008.csv", header = F),
read.csv("~/Desktop/cmh/users_0009.csv", header = F))
users <- users[,c('V8','V9')]
colnames(users) <- c('weight_units', 'glooko_code')
mrn <- read.csv("~/Downloads/users_mrn_11_27.csv")
mrn <- read.csv("~/Downloads/user_mrn_11_27.csv")
colnames(mrn) <- c('glooko_code', 'mrn')
head(mrn)
colnames(mrn) <- c('mrn', 'glooko_code')
head(mrn)
final <- merge(users, mrn, by='glooko_code', all.x=TRUE)
final
final[,c(1,3)]
final <- final[,c(1,3)]
write.csv(final, "/Users/Desktop/cmh/users_mrn.csv")
?write.csv
final
write.csv(final, "~/Desktop/cmh/users_mrn.csv")
email <- read.csv("~/Downloads/users_email.csv")
head(email)
email <- read.csv("~/Downloads/user_email.csv")
head(email)
colnames(email) <- c('first_name', 'last_name', 'glooko_code')
final <- merge(users, email, by='glooko_code', all.x=TRUE)
write.csv(final, "~/Desktop/cmh/users_name.csv")
source('~/.active-rstudio-document')
setwd("~/Documents/GitHub/nbaproj_ieor/Vikram/processed_data/")
td_top5 <- read.csv("historical_team_data_top_5.csv")
td_top5_gs <- read.csv("historical_team_data_top_5_gs.csv")
td_top5_adv <- read.csv("historical_team_data_top_5_advanced.csv")
td_all <0 read.csv("historical_team_data.csv")
td_all <- read.csv("historical_team_data.csv")
td_top5[!is.na(td_top5)]
test <-td_top5[!is.na(td_top5)]
head(test)
test
head(td_top5)
test <-td_top5[!is.na(td_top5),]
head(test)
td_top5 <- td_top5[!is.na(td_top5),]
td_top5_gs <- td_top5_gs[!is.na(td_top5_gs),]
td_top5_adv <- td_top5_adv[!is.na(td_top5_adv),]
td_all <- td_all[!is.na(td_all),]
td_top5[td_top5$season != 2017,]
td_top5 <- td_top5[td_top5$season != 2017,]
td_top5_gs <- td_top5_gs[td_top5_gs$season != 2017,]
td_top5_advs <- td_top5_advs[td_top5_adv$season != 2017,]
td_all <- td_all[td_all$season != 2017,]
td_top5 <- td_top5[td_top5$season != 2017,]
td_top5_gs <- td_top5_gs[td_top5_gs$season != 2017,]
td_top5_advs <- td_top5_adv[td_top5_adv$season != 2017,]
td_all <- td_all[td_all$season != 2017,]
td_all <- td_all[,-which(names(td_all) %in% c('season', 'team_name', 'w', 'l'))]
smp_size <- floor(0.7 * nrow(td_all))
set.seed(100)
train_ind <- sample(seq_len(nrow(td_all)), size = smp_size)
train <- mtcars[train_ind, ]
test <- mtcars[-train_ind, ]
train <- td_all[train_ind, ]
test <- td_all[-train_ind, ]
head(test)
head(train)
td_all <- td_all[,-which(names(td_all) %in% c('season', 'team_name', 'w', 'l'))]
smp_size <- floor(0.7 * nrow(td_all))
set.seed(100)
train_ind <- sample(seq_len(nrow(td_all)), size = smp_size)
train <- td_all[train_ind, ]
test <- td_all[-train_ind, ]
head(train)
head(train)
td_all <- td_all[,-which(names(td_all) %in% c('season', 'team_name', 'w', 'l'))]
smp_size <- floor(0.7 * nrow(td_all))
smp_size
nrow(td_all)
set.seed(100)
train_ind <- sample(seq_len(nrow(td_all)), size = smp_size)
train_ind
td_all[train_ind, ]
head(td_all)
td_all <- read.csv("historical_team_data.csv")
td_all <- td_all[!is.na(td_all),]
td_all <- td_all[td_all$season != 2017,]
head(td_all)
td_all <- td_all[,-which(names(td_all) %in% c('season', 'team_name', 'w', 'l'))]
smp_size <- floor(0.7 * nrow(td_all))
set.seed(100)
train_ind <- sample(seq_len(nrow(td_all)), size = smp_size)
head(td_all)
train <- td_all[train_ind, ]
head(train)
head(td_all)
head(train_ind)
train
train <- td_all[rownames(td_all) %in% train_ind, ]
head(train)
train
nrow(train)
rownames(td_all)
td_all <- td_all[!is.na(td_all),]
rownames(td_all)
td_all <- read.csv("historical_team_data.csv")
head(td_all)
rownames(td_all)
td_all <- td_all[!is.na(td_all),]
rownames(td_all)
td_top5 <- td_top5[complete.cases(td_top5),]
td_top5_gs <- td_top5_gs[complete.cases(td_top5_gs),]
td_top5 <- read.csv("historical_team_data_top_5.csv")
td_top5_gs <- read.csv("historical_team_data_top_5_gs.csv")
td_top5_adv <- read.csv("historical_team_data_top_5_advanced.csv")
td_all <- read.csv("historical_team_data.csv")
td_top5 <- td_top5[complete.cases(td_top5),]
td_top5_gs <- td_top5_gs[complete.cases(td_top5_gs),]
td_top5_adv <- td_top5_adv[complete.cases(td_top5_adv),]
td_all <- td_all[complete.cases(td_all),]
head(td_all)
rownames(td_all)
td_top5 <- td_top5[td_top5$season != 2017,]
td_top5_gs <- td_top5_gs[td_top5_gs$season != 2017,]
td_top5_advs <- td_top5_adv[td_top5_adv$season != 2017,]
td_all <- td_all[td_all$season != 2017,]
head(td_all)
td_all <- td_all[,-which(names(td_all) %in% c('season', 'team_name', 'w', 'l'))]
smp_size <- floor(0.7 * nrow(td_all))
set.seed(100)
train_ind <- sample(seq_len(nrow(td_all)), size = smp_size)
train <- td_all[rownames(td_all) %in% train_ind, ]
test <- td_all[-train_ind, ]
head(train)
nrow(train)
nrow(test)
td_top5 <- read.csv("historical_team_data_top_5.csv")
td_top5_gs <- read.csv("historical_team_data_top_5_gs.csv")
td_top5_adv <- read.csv("historical_team_data_top_5_advanced.csv")
td_all <- read.csv("historical_team_data.csv")
td_top5 <- td_top5[complete.cases(td_top5),]
td_top5_gs <- td_top5_gs[complete.cases(td_top5_gs),]
td_top5_adv <- td_top5_adv[complete.cases(td_top5_adv),]
td_all <- td_all[complete.cases(td_all),]
#TD ALl
td_all <- td_all[,-which(names(td_all) %in% c('season', 'team_name', 'w', 'l'))]
## 75% of the sample size
smp_size <- floor(0.7 * nrow(td_all))
## set the seed to make your partition reproductible
set.seed(100)
train_ind <- sample(seq_len(nrow(td_all)), size = smp_size)
train <- td_all[rownames(td_all) %in% train_ind, ]
test <- td_all[-train_ind, ]
nrow(train)
head(train)
mod <- lm(wp~., data=train)
summary(mod)
#TD Top 5
td_top5 <- td_top5[,-which(names(td_top5) %in% c('season', 'team_name', 'w', 'l'))]
## 75% of the sample size
smp_size <- floor(0.7 * nrow(td_top5))
## set the seed to make your partition reproductible
set.seed(100)
train_ind <- sample(seq_len(nrow(td_top5)), size = smp_size)
train <- td_top5[rownames(td_top5) %in% train_ind, ]
test <- td_top5[-train_ind, ]
mod_top5 <- lm(wp~., data=train)
mod_top5
summary(mod_top5)
td_top5_gs <- td_top5_Gs[,-which(names(td_top5_gs) %in% c('season', 'team_name', 'w', 'l'))]
## 75% of the sample size
smp_size <- floor(0.7 * nrow(td_top5_gs))
## set the seed to make your partition reproductible
set.seed(100)
train_ind <- sample(seq_len(nrow(td_top5_gs)), size = smp_size)
train <- td_top5_gs[rownames(td_top5_gs) %in% train_ind, ]
test <- td_top5_gs[-train_ind, ]
mod_top5_gs <- lm(wp~., data=train)
td_top5_gs <- td_top5_gs[,-which(names(td_top5_gs) %in% c('season', 'team_name', 'w', 'l'))]
## 75% of the sample size
smp_size <- floor(0.7 * nrow(td_top5_gs))
## set the seed to make your partition reproductible
set.seed(100)
train_ind <- sample(seq_len(nrow(td_top5_gs)), size = smp_size)
train <- td_top5_gs[rownames(td_top5_gs) %in% train_ind, ]
test <- td_top5_gs[-train_ind, ]
mod_top5_gs <- lm(wp~., data=train)
summary(mod_top5_gs)
sa_data <- read.csv('season_average_top_5_data.csv')
head(sa_data)
td_top5 <- read.csv("historical_team_data_top_5.csv")
td_top5 <- td_top5[complete.cases(td_top5),]
td_top5 <- td_top5[td_top5$season != 2017,]
print(i)
head(sa_data[,-1])
test <- sapply(unique(sa_data$season), function(i) {
team_data <- subset(td_top5, season==i)
season_data <- subset(sa_data, season==i & X=='mean')[,-1]
final <- season_data - team_data
return(final)
})
ncol(sa_data)
ncol(td_top5)
colnames(td_top5)
colnames(sa_data)
wp <- td_top5$wp
td_top5 <- td_top5[,-which(names(td_top5) %in% c('team_name', 'w', 'l', 'mp', 'wp'))]
sa_data <- read.csv('season_average_top_5_data.csv')
wp <- td_top5$wp
td_top5 <- td_top5[,-which(names(td_top5) %in% c('team_name', 'w', 'l', 'mp', 'wp'))]
colnames(sa_data)
colnames(td_top5)
td_top5 <- read.csv("historical_team_data_top_5.csv")
td_top5 <- td_top5[complete.cases(td_top5),]
td_top5 <- td_top5[td_top5$season != 2017,]
sa_data <- read.csv('season_average_top_5_data.csv')
wp <- td_top5$wp
td_top5 <- td_top5[,-which(names(td_top5) %in% c('team_name', 'w', 'l', 'mp', 'wp'))]
td_top5
colnames(sa_data)
colnames(td_top5)
ncol(sa_data)
subset(colnames(td_top5), !(colnames(td_top5) %in% colnames(sa_data)))
sa_data <- read.csv('season_average_top_5_data.csv')
wp <- td_top5$wp
td_top5 <- td_top5[,-which(names(td_top5) %in% c('team_name', 'w', 'l', 'mp', 'wp', "fg"  "X3p" "X2p" "ft" ))]
sa_data <- read.csv('season_average_top_5_data.csv')
wp <- td_top5$wp
td_top5 <- td_top5[,-which(names(td_top5) %in% c('team_name', 'w', 'l', 'mp', 'wp', 'fg', ,"X3p", "X2p", "ft"))]
setwd("~/Documents/GitHub/nbaproj_ieor/Vikram/processed_data/")
td_top5 <- read.csv("historical_team_data_top_5.csv")
td_top5_gs <- read.csv("historical_team_data_top_5_gs.csv")
td_top5_adv <- read.csv("historical_team_data_top_5_advanced.csv")
td_all <- read.csv("historical_team_data.csv")
td_top5 <- td_top5[complete.cases(td_top5),]
td_top5_gs <- td_top5_gs[complete.cases(td_top5_gs),]
td_top5_adv <- td_top5_adv[complete.cases(td_top5_adv),]
td_all <- td_all[complete.cases(td_all),]
td_top5 <- td_top5[td_top5$season != 2017,]
td_top5_gs <- td_top5_gs[td_top5_gs$season != 2017,]
td_top5_advs <- td_top5_adv[td_top5_adv$season != 2017,]
td_all <- td_all[td_all$season != 2017,]
sa_data <- read.csv('season_average_top_5_data.csv')
wp <- td_top5$wp
td_top5 <- td_top5[,-which(names(td_top5) %in% c('team_name', 'w', 'l', 'mp', 'wp', 'fg', ,'X3p', 'X2p', 'ft'))]
sa_data <- read.csv('season_average_top_5_data.csv')
wp <- td_top5$wp
td_top5 <- td_top5[,-which(names(td_top5) %in% c('team_name', 'w', 'l', 'mp', 'wp', 'fg','X3p', 'X2p', 'ft'))]
test <- sapply(unique(sa_data$season), function(i) {
team_data <- subset(td_top5, season==i)
season_data <- subset(sa_data, season==i & X=='mean')[,-1]
final <- season_data - team_data
return(final)
})
ncol(td_top5)
ncol(sa_data)
subset(colnames(td_top5), !(colnames(td_top5) %in% colnames(sa_data)))
subset(colnames(sa_data), !(colnames(sa_data) %in% colnames(td_top5)))
test <- sapply(unique(sa_data$season), function(i) {
team_data <- subset(td_top5, season==i)
season_data <- subset(sa_data, season==i & X=='mean')[,-1]
print(season_data)
final <- season_data - team_data
return(final)
})
test <- sapply(unique(sa_data$season), function(i) {
team_data <- subset(td_top5, season==i)
season_data <- subset(sa_data, season==i & X=='mean')[,-1]
print(season_data)
final <- team_data - season_data
return(final)
})
test <- sapply(unique(sa_data$season), function(i) {
team_data <- subset(td_top5, season==i)
season_data <- subset(sa_data, season==i & X=='mean')[,-1]
print(colnames(team_data))
print(colnames(season_data))
final <- team_data - season_data
return(final)
})
td_top5_adv <- td_top5_adv[td_top5_adv$season != 2017,]
td_top5_advs <- td_top5_adv[,-which(names(td_top5_adv) %in% c('season', 'team_name', 'w', 'l'))]
## 75% of the sample size
smp_size <- floor(0.7 * nrow(td_top5_adv))
## set the seed to make your partition reproductible
set.seed(100)
train_ind <- sample(seq_len(nrow(td_top5_adv)), size = smp_size)
train <- td_top5_adv[rownames(td_top5_adv) %in% train_ind, ]
test <- td_top5_adv[-train_ind, ]
mod_top5_adv <- lm(wp~., data=train)
summary(mod_top5_adv)
td_top5_adv <- td_top5_adv[,-which(names(td_top5_adv) %in% c('season', 'team_name', 'w', 'l'))]
smp_size <- floor(0.7 * nrow(td_top5_adv))
set.seed(100)
train_ind <- sample(seq_len(nrow(td_top5_adv)), size = smp_size)
train <- td_top5_adv[rownames(td_top5_adv) %in% train_ind, ]
test <- td_top5_adv[-train_ind, ]
mod_top5_adv <- lm(wp~., data=train)
summary(mod_top5_adv)
